use bevy::prelude::*;

#[allow(unused)]

use crate::{collision::enemy_collision, wall::spawn_walls, TILE_SIZE, player::Player};

const _ENEMY_SPEED: f32 = 0.04;
pub struct EnemyPlugin;
#[derive(Component)]
pub struct Enemy;


impl Plugin for EnemyPlugin {
    fn build(&self, app: &mut App) {
        app.add_system(enemy_collision);
    }
}


/*fn move_enemy( 
    mut enemy_query: Query<&mut Transform, (With<Enemy>, Without<Player>)>,
    mut player_query: Query<&mut Transform,(With<Player>, Without<Enemy>)>,
    time: Res<Time>,
){
    let slow_down: f32 = 0.3 * time.delta_seconds();
    for mut etf  in enemy_query.iter_mut(){
	for ptf in player_query.iter_mut(){
	    etf.translation.x = ptf.translation.x * slow_down;
	    etf.translation.y = ptf.translation.y * slow_down;
	}

    }
}*/







//2.0, -1.6
//0.33, -1.1
